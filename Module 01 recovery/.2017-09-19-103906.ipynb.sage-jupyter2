{"type":"settings","backend_state":"running","trust":true,"kernel":"python2","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"file","last_load":1505943074977}
{"output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-6-69c6dfd8f7a2>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-69c6dfd8f7a2>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    function cd() {\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"exec_count":6,"start":1505943185482,"input":"function cd() {  \nnew_directory=\"$*\";\nif [ $# -eq 0 ]; then\nnew_directory=${HOME}; \nfi; <br>\nbuiltin cd \"${new_directory}\" && ls\n}","state":"done","pos":13,"cell_type":"code","type":"cell","end":1505943185494,"id":"a69308","kernel":"python2"}
{"type":"cell","id":"83b760","pos":17,"input":"<html>\n<body>\n<p>(k) When using more filename, you can search for a particular string by selecting the forward </br>\nslash key, typing the string, and pressing enter. However, if you want to look for a string in </br>\n</body>\n\n<body>\nmultiple files, then the command grep is a better option. </br>\nType the following: </br>\n<blockquote>\n       ~$ grep second test.txt \n          </blockquote>\n\nNotice the syntax: $ grep string filename. What is the output? </br>\n</p>\n</body>","cell_type":"markdown"}
{"type":"cell","id":"d0d3a7","pos":16,"input":"<p>(j) We can add a second line as follows: </br>\n<blockquote>\n~$ echo this\\ is\\ the\\ second\\ line >> test.txt </br>\n</blockquote>\nHow does this command differ from your previous version? </br>\n</p>","cell_type":"markdown"}
{"type":"cell","id":"95e95f","pos":8,"input":"<p>(c) List the contents of the current directory in long format with hidden files revealed. What\nadditional files/directories are present in your home directory?</p>","cell_type":"markdown"}
{"type":"cell","id":"077fdb","pos":4,"input":"<p>     pwd shows the current working directory as /home/user/Module 01</p>","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"u'/home/user/Module 01'"},"exec_count":4}},"exec_count":4,"start":1505943096355,"input":"pwd","state":"done","pos":3,"cell_type":"code","type":"cell","end":1505943096374,"id":"9090d8","kernel":"python2"}
{"type":"cell","id":"d8f57d","pos":7,"input":"<p>ls is a linux shell command that list directory contents of files and directories and an addition of -l will give you a list with long format and show permissions of the files. </p>","cell_type":"markdown"}
{"type":"cell","id":"1ec32b","pos":5,"input":"<p>(b) List the contents of the current directory in long format. What additional information is provided\nwhen using the option -l? </p>","cell_type":"markdown"}
{"type":"cell","id":"653b03","pos":0,"input":"<h3>1. Directory Navigation</h3>\n<p>For each of the following directives, make note of the terminal response or output. You will hand in\nyour notes as the first assignment. [20 pts]</p>","cell_type":"markdown"}
{"type":"cell","id":"d403e6","pos":15,"input":"<p>(i) Read your file with the following command. </br>\n~$ more test.txt </br>\nWhat happens?</p>","cell_type":"markdown"}
{"type":"cell","id":"e77477","pos":9,"input":"<p>(d) Create a directory called test. What are the permissions of your new directory? Remember that\npermissions are listed as a string of 10 characters beginning with a d for directory or a - for\nother file types. This first character is followed by 9 characters arranged in groups of three for\nuser/group/other. The three possible characters are rwx, which stand for readable, writeable\nand executable when present. If no permission is granted, the triplet will appear as ---.</p>","cell_type":"markdown"}
{"type":"cell","id":"7d1142","pos":14,"input":"<p>(h) Within the directory test, make a new file with the command:  </br>\n~$ echo this\\ is\\ my\\ first\\ file > test.txt</br>\nWhy do we use the backslash (also called an escape)? How can you verify your file has been</br>\ncreated? </p>","cell_type":"markdown"}
{"type":"cell","id":"e22975","pos":1,"input":"<p>(a) Determine your current working directory. What is it?</p>","cell_type":"markdown"}
{"type":"cell","id":"6701dd","pos":11,"input":"<p>(f) Change the working directory back to your home directory. </p>\n<p>~$ cd .. </p>\n<p>What do the two periods accomplish? To discover for yourself, you may wish to create a\ndirectory beneath test and move to this new directory. Use cd with the periods, and use cd\nalone. What is the difference?</p>","cell_type":"markdown"}
{"type":"cell","id":"b6693d","pos":12,"input":"<p>(g) Write a new function called cd to combine the operations cd and ls as follows. Be careful with\nyour syntax.</p>\n\n<p>Describe what happens each time the builtin command cd is used? If you are annoyed by this\nfeature, you may enter the function again as it appears above but omitting the && ls portion\nof the final line.</p>","cell_type":"markdown"}
{"type":"cell","id":"693b7a","pos":18,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"d605d0","pos":10,"input":"<p>(e) Change the current working directory to the new test directory.</p>\n<p>~$ cd test && ls -l </p>\n<p>What does the symbol && do? </p>","cell_type":"markdown"}
{"type":"cell","id":"7f9650","pos":6,"input":"ls -l","cell_type":"code","exec_count":0}
{"output":{"0":{"text":"\nAutomagic is ON, % prefix IS NOT needed for line magics.\n","name":"stdout"}},"exec_count":3,"start":1505943094452,"input":"%automagic 0 #set automagic to 1 to turn terminal on without %","state":"done","pos":2,"cell_type":"code","type":"cell","end":1505943094478,"id":"6509f2","kernel":"python2"}