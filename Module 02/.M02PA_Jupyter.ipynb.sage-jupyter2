{"type":"settings","kernel":"python3","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"},"name":"Week 1 Exercise 1 scripts_examples_notebook_tour.ipynb"},"kernel_state":"idle"}
{"start":1505835918869,"input":"import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 3*np.pi, 500)     #linspace gives us 500 equally spaced numbers between zero and 3 pi\nplt.plot(x, np.sin(x**2),'r-')\nplt.title('My Line Python');","state":"done","pos":17,"cell_type":"code","type":"cell","end":1505835918869,"id":"11d333","kernel":"python3"}
{"start":1505835918868,"input":"%matplotlib inline # Magic command not required in cocalc.com, but must be used in your local installation.","state":"done","pos":16,"cell_type":"code","type":"cell","end":1505835918868,"id":"d790c2","kernel":"python3"}
{"exec_count":1,"start":1505835918749,"input":"#%cd # Will allow you to change your working directory.","state":"done","pos":1,"cell_type":"code","type":"cell","end":1505835918758,"id":"c3df4b","kernel":"python3"}
{"type":"cell","id":"e5d2d2","pos":30,"input":"<h3>Converting Between Variable Types</h3>\n\n|Function | Description|\n|--------|:---------:|\n|`int(x [,base])` | Converts x to a long integer. Base specifies the base if x is a string, i.e. Unicode, etc.|\n|`float(x)` | Converts x to a floating-point number.|\n|`complex(real [,imag])` | Creates a complex number.|\n|`str(x)` | Converts object x to a string representation.|\n|`eval(str)` | Evaluates a string and returns an object.|\n|`tuple(s)` | Converts s to a tuple.|\n|`list(s)` | Converts s to a list.|\n|`dict(d)` | Creates a dictionary. d must be a sequence of (key,value) tuples.|\n|`chr(x)` | Converts an integer to a character.|\n|`ord(x)` | Converts a single character to its integer value.|\n\n\n","cell_type":"markdown"}
{"start":1505835918883,"input":"dict = {}\ndict['one'] = \"This is one\"\ndict[2]     = \"This is two\"\n\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\n\n\nprint(dict['one'])       # Prints value for 'one' key\nprint(dict[2])           # Prints value for 2 key\nprint(tinydict)          # Prints complete dictionary\nprint(tinydict.keys())   # Prints all the keys\nprint(tinydict.values()) # Prints all the values","state":"done","pos":29,"cell_type":"code","type":"cell","end":1505835918883,"id":"b7acbc","kernel":"python3"}
{"type":"cell","id":"fe6e91","pos":53,"input":"<p>You can also paste blocks of input with prompt markers, such as those from\n<a href=\"http://docs.python.org/tutorial/interpreter.html#interactive-mode\">the official Python tutorial</a> </p>","cell_type":"markdown"}
{"type":"cell","id":"f8c125","pos":24,"input":"<h3>Tuples</h3>\n<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p>\n\n<p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are shown as enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists. For example:</p>","cell_type":"markdown"}
{"type":"cell","id":"693a26","pos":51,"input":"<h2>Loading external codes</h2>\n* Drag and drop a ``.py`` in the dashboard\n* Use ``%loadpy`` with any local or remote url: [the Matplotlib Gallery!](http://matplotlib.sourceforge.net/gallery.html)\n\nIn this notebook we've kept the output saved so you can see the result, but you should run the next\ncell yourself (with an active internet connection).","cell_type":"markdown"}
{"type":"cell","id":"6e798d","pos":20,"input":"<h3>Numbers</h3>\n<p>Number data types store numeric values. They are immutable data types which means that changing the value of a number data type results in a newly allocated object.</p>","cell_type":"markdown"}
{"type":"cell","id":"6a2e41","pos":10,"input":"This means we can write shell scripts within the notebook environment.","cell_type":"markdown"}
{"type":"cell","id":"9dbfda","pos":38,"input":"<h2>Markdown cells can contain formatted text and code</h2> \n\nIn markdown and/or html\n\nYou can *italicize*, **boldface**\n\n* build\n* lists\n\nand embed code meant for illustration instead of execution in Python:\n\n    def f(x):\n        \"\"\"a docstring\"\"\"\n        return x**2\n\nor other languages:\n\n    if (i=0; i<n; i++) {\n      printf(\"hello %d\\n\", i);\n      x += 4;\n    }\n","cell_type":"markdown"}
{"start":1505835918897,"input":"from IPython.core.display import Math\nMath(r'$F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx$')","state":"done","pos":50,"cell_type":"code","type":"cell","end":1505835918897,"id":"446740","kernel":"python3"}
{"start":1505835918872,"input":"x=0\nprint(type(x))\na = b = c = 1.53\nprint(x, a, round(b), int(c)) # Round is typical rounding, int gets rid of stuff left of the decimal\nprint(type(b),type(round(b))) # N.B. round creates an integer.","state":"done","pos":21,"cell_type":"code","type":"cell","end":1505835918872,"id":"092ea1","kernel":"python3"}
{"type":"cell","id":"a96454","pos":44,"input":"<p>SVG images are also supported out of the box (since modern browsers do a good job of rendering them):</p>","cell_type":"markdown"}
{"start":1505835918898,"input":"# %load http://matplotlib.org/mpl_examples/style_sheets/plot_dark_background.py\n\"\"\"\n===========================\nDark background style sheet\n===========================\n\nThis example demonstrates the \"dark_background\" style, which uses white for\nelements that are typically black (text, borders, etc). Note that not all plot\nelements default to colors defined by an rc parameter.\n\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.style.use('dark_background')\n\nfig, ax = plt.subplots()\n\nL = 6\nx = np.linspace(0, L)\nncolors = len(plt.rcParams['axes.prop_cycle'])\nshift = np.linspace(0, L, ncolors, endpoint=False)\nfor s in shift:\n    ax.plot(x, np.sin(x + s), 'o-')\nax.set_xlabel('x-axis')\nax.set_ylabel('y-axis')\nax.set_title(\"'dark_background' style sheet\")\n\nplt.show()\n","state":"done","pos":52,"cell_type":"code","type":"cell","end":1505835918898,"id":"019f2a","kernel":"python3"}
{"start":1505835918871,"input":"str = 'Hola el mundo!\\n'\n\n#print(str)          # Prints complete string\n#print(str[0])       # Prints first character of the string\n#print(str[2:])     # Prints characters starting from 3rd to 5th\n#print(str[2:-1])    # Prints string starting from 3rd character; -1 leaves off last character\n#print(str * 2)      # Prints string two times\nprint(str + \"TEST\") # Prints concatenated string","state":"done","pos":19,"cell_type":"code","type":"cell","end":1505835918871,"id":"b9c90a","kernel":"python3"}
{"start":1505835918893,"input":"from IPython.core.display import SVG\nSVG(url='https://www.djangoproject.com/s/img/logos/django-logo-positive.svg')","state":"done","pos":45,"cell_type":"code","type":"cell","end":1505835918893,"id":"164460","kernel":"python3"}
{"type":"cell","id":"94b57f","pos":42,"input":"<p>An image can also be displayed from raw data or a url</p>","cell_type":"markdown"}
{"type":"cell","id":"9afeed","pos":31,"input":"<h2>Errors</h2>\n<p>Errors are shown in informative ways:</p>","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"'/home/user/Module 02'"},"exec_count":5}},"exec_count":5,"start":1505835927282,"input":"pwd # This is a comment not exected in python. pwd prints your working directory.","state":"done","pos":3,"cell_type":"code","type":"cell","end":1505835927298,"id":"5f34ec","kernel":"python3"}
{"type":"cell","id":"ca30cb","pos":46,"input":"<h3>Video</h3>","cell_type":"markdown"}
{"output":{"0":{"name":"stdout","text":"2017-09-05-082150.term    M02PA_Jupyter.ipynb           integrator.py\r\n2017-09-07-092049.term    M02PB_Python_Functions.ipynb  python-logo-large.jpg\r\nL02_Basic_Notebook.ipynb  \u001b[0m\u001b[01;34m__pycache__\u001b[0m/                  \u001b[01;32mtest.sh\u001b[0m*\r\n"}},"exec_count":6,"start":1505835929611,"input":"ls  # \"lists\" your current directory files and folders","state":"done","pos":4,"cell_type":"code","type":"cell","end":1505835929739,"id":"fcfbc3","kernel":"python3"}
{"start":1505835918891,"input":"Image(url='https://www.python.org/static/community_logos/python-logo-master-v3-TM.png')","state":"done","pos":43,"cell_type":"code","type":"cell","end":1505835918891,"id":"c9022d","kernel":"python3"}
{"start":1505835918886,"input":"x = 1\ny = 4\nz = y/(1-x)","state":"done","pos":33,"cell_type":"code","type":"cell","end":1505835918886,"id":"3056ec","kernel":"python3"}
{"type":"cell","id":"76bc46","pos":15,"input":"<p>**NB:** For plots with matplotlib, do *not* execute the next below if you do not have matplotlib installed or didn't call the `%matplolib` magic, as the code will not work.</p>","cell_type":"markdown"}
{"type":"cell","id":"f14e66","pos":26,"input":"<p>Try the following. What happens? Why?</p>","cell_type":"markdown"}
{"start":1505835918900,"input":">>> the_world_is_flat = 1\n>>> if the_world_is_flat:\n...     print(\"Be careful not to fall off!\")","state":"done","pos":54,"cell_type":"code","type":"cell","end":1505835918900,"id":"2b2be4","kernel":"python3"}
{"start":1505835918873,"input":"list = [ 'abcd', 786 , 2.23, 'apples', 70.2 ]  # Lists use brackets\ntinylist = [123, 'apples']\n\nprint(list)            # Prints complete list\nprint(list[0])         # Prints first element of the list\nprint(list[1:3])       # Prints elements starting from 2nd till 3rd; includes first element, upper bound not inclusive\nprint(list[2:])        # Prints elements starting from 3rd element\nprint(tinylist * 2)    # Prints list two times\n#print(list + tinylist) # Prints concatenated lists","state":"done","pos":23,"cell_type":"code","type":"cell","end":1505835918873,"id":"c1116b","kernel":"python3"}
{"type":"cell","id":"09d750","pos":28,"input":"<h3>Dictionaries</h3>\n<p>Python's dictionaries are an associative array, or a structure that maps keys to values. A dictionary key can be almost any Python type, but are usually numbers or strings. The values can be any arbitrary Python object.</p>\n\n<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are \"out of order\"; they are simply unordered.</p>\n\n<p>Dictionaries are enclosed by curly brackets ( { } ) and values can be assigned and accessed using square brackets ( [ ] ). For example:</p>","cell_type":"markdown"}
{"start":1505835918865,"input":"%%bash\nfor i in a b c;\ndo\necho $i\ndone","state":"done","pos":12,"cell_type":"code","type":"cell","end":1505835918865,"id":"2987b0","kernel":"python3"}
{"start":1505835918863,"input":"lsmagic # This command gives a complete listing of line and cell magic commands available.","state":"done","pos":9,"cell_type":"code","type":"cell","end":1505835918863,"id":"acd87a","kernel":"python3"}
{"type":"cell","id":"416699","pos":22,"input":"<h3>Lists</h3>\n<p>Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ( [ ] ). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p>\n\n<p>The values stored in a list can be accessed using the slice operator ( [ ] and [ : ] ) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus ( + ) sign is the list concatenation operator, and the asterisk ( * ) is the repetition operator. For example:</p>","cell_type":"markdown"}
{"start":1505835918889,"input":"import time, sys\nfor i in range(8):\n    print(i ,)\n    time.sleep(0.5)","state":"done","pos":37,"cell_type":"code","type":"cell","end":1505835918889,"id":"373636","kernel":"python3"}
{"start":1505835918890,"input":"from IPython.core.display import Image\nImage('python-logo-large.jpg')","state":"done","pos":41,"cell_type":"code","type":"cell","end":1505835918890,"id":"6523c6","kernel":"python3"}
{"type":"cell","id":"d7fdd9","pos":34,"input":"<p>When Jupyter needs to display additional information it will automatically invoke a pager at the bottom of the screen: </p>","cell_type":"markdown"}
{"type":"cell","id":"ba3d65","pos":11,"input":"<h2>Shell Scripting in Jupyter</h2>","cell_type":"markdown"}
{"start":1505835918885,"input":"%run non_existent_file","state":"done","pos":32,"cell_type":"code","type":"cell","end":1505835918885,"id":"fc1b0b","kernel":"python3"}
{"type":"cell","id":"16e94f","pos":40,"input":"<h2>Rich Displays</h2> \n\n<p>Jupyter notebooks can display anyting a browser can.</p>\n\n<p>Note that we have an actual protocol for this, see the `display_protocol` notebook for further details.</p>\n\n<h3>Images</h3>","cell_type":"markdown"}
{"type":"cell","id":"a14ea9","pos":49,"input":"<h3>Mathematics</h3>\n\n<p>And we also support the display of mathematical expressions typeset in LaTeX, which is rendered in the browser thanks to the [MathJax library](http://mathjax.org).  </p>\n\n<p>Note that this is *different* from the above examples.  Above we were typing mathematical expressions in Markdown cells (along with normal text) and letting the browser render them; now we are displaying the output of a Python computation as a LaTeX expression wrapped by the `Math()` object so the browser renders it: ","cell_type":"markdown"}
{"type":"cell","id":"1d8c92","pos":47,"input":"<p>And more exotic objects can also be displayed, as long as their representation supports \nthe IPython display protocol.</p>\n\n<p>For example, videos hosted externally on YouTube are easy to load (and writing a similar wrapper for other hosted content is trivial):</p>","cell_type":"markdown"}
{"type":"cell","id":"ec1288","pos":39,"input":"Courtesy of MathJax, you can include mathematical expressions both inline: \n$e^{i\\pi} + 1 = 0$  and displayed:\n\n$$e^x=\\sum_{i=0}^\\infty \\frac{1}{i!}x^i$$","cell_type":"markdown"}
{"start":1505835918860,"input":"!pwd","state":"done","pos":6,"cell_type":"code","type":"cell","end":1505835918860,"id":"12cb6c","kernel":"python3"}
{"start":1505835918896,"input":"from IPython.lib.display import YouTubeVideo\n# a talk about IPython at Sage Days at U. Washington, Seattle.\n# Video credit: William Stein.\nYouTubeVideo('1j_HxD4iLn8')","state":"done","pos":48,"cell_type":"code","type":"cell","end":1505835918896,"id":"77c2d9","kernel":"python3"}
{"type":"cell","id":"099324","pos":36,"input":"## Non-blocking output of kernel\n\nIf you execute the next cell, you will see the output arriving as it is generated, not all at the end.","cell_type":"markdown"}
{"output":{"0":{"name":"stdout","text":"\nAutomagic is ON, % prefix IS NOT needed for line magics.\n"}},"exec_count":4,"start":1505835924985,"input":"%automagic 1 # Toggle automagic on by using a number one instead of a zero.","state":"done","pos":2,"cell_type":"code","type":"cell","end":1505835925005,"id":"c216a3","kernel":"python3"}
{"type":"file","last_load":1504789232651}
{"start":1505835918887,"input":"magic","scrolled":true,"state":"done","pos":35,"cell_type":"code","type":"cell","end":1505835918887,"id":"cee962","kernel":"python3"}
{"start":1505835918876,"input":"tuple = ('abcd', 786 , 2.23, 'oranges', 70.2, )  #Tuples require commas\ntinytuple = (123, 'oranges')\n\nprint(tuple)           # Prints complete list\nprint(tuple[0])        # Prints first element of the list\nprint(tuple[1:3])      # Prints elements starting from 2nd till 3rd \nprint(tuple[2:])       # Prints elements starting from 3rd element\nprint(tinytuple * 2)   # Prints list two times\nprint(tuple + tinytuple) # Prints concatenated lists","state":"done","pos":25,"cell_type":"code","type":"cell","end":1505835918876,"id":"321f2f","kernel":"python3"}
{"start":1505835918881,"input":"tuple = ( 'abcd', 786 , 2.23, 'apples', 70.2  ) #parenthesis\nlist = [ 'abcd', 786 , 2.23, 'apples', 70.2  ]  #brackets\n#tuple[2] = 1000    # Invalid syntax with tuple,\n#cannot add a tuple, it doesnt work like a list\nlist[2] = 1000     # Valid syntax with list\n\nprint(list)","state":"done","pos":27,"cell_type":"code","type":"cell","end":1505835918881,"id":"48000a","kernel":"python3"}
{"type":"cell","id":"6aa549","pos":0,"input":"<h1>Module 1, Part A: Jupyter Notebook Tour</h1>\n\n<p>This document will give you a brief tour of the capabilities of the Jupyter notebook frontend. You can execute each cell by typing `Shift-Enter`. After you conclude this brief tour, there are three additional introductory notebooks<br> <ul>\n<li><a href= \"M02PB_Python_Functions.ipynb\" >Module 2, Part B- Functions</a>, <br>which introduces writing functions in python and how to use functions.</p> </li>\n</ul>\n\n<p>The rest of the notebooks in this directory illustrate various other aspects and \ncapabilities of the Jupyter Notebook. Some aspects may require additional libraries to be executed.</p>\n\n<p>**NB:** This notebook *must* be run from its own directory, so you must `%cd`\nto this directory and then start the notebook, but do *not* use the `--notebook-dir`\noption to run it from another location.</p>\n\n<h2>Shell Aliases and Magic Commands</h2>","cell_type":"markdown"}
{"type":"cell","id":"553303","pos":14,"input":"<h2>Generate Inline Plots</h2>","cell_type":"markdown"}
{"type":"cell","id":"408825","pos":5,"input":"You can use exclamation points to call unix commands if you are using a unix-based operating system.","cell_type":"markdown"}
{"type":"cell","id":"d77922","pos":8,"input":"For a complete listing of line and cell magics evoke the command below:","cell_type":"markdown"}
{"type":"cell","id":"5aa595","pos":18,"input":"<h2>Python Variable Types</h2>\n\n<h3>Strings</h3>\n<p>Strings in Python are identified as a contiguous set of characters in between quotation marks (e.g. \"string\") , apostrophes (e.g. 'string') or sets of three apostrophes (e.g. '''string'''). Subsets of strings can be taken using the slice operator ( [ ] and [ : ] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p>\n\n<p>The plus ( + ) sign is the string concatenation operator and the asterisk ( * ) is the repetition operator. For example:</p>","cell_type":"markdown"}
{"start":1505835918866,"input":"%%bash\n./test.sh param1 param2","state":"done","pos":13,"cell_type":"code","type":"cell","end":1505835918866,"id":"78a3c8","kernel":"python3"}
{"start":1505835918861,"input":"message = 'The jupyter notebook is great!'\n# note: the echo command does not run on Windows, it's a unix command.\n!echo $message","state":"done","pos":7,"cell_type":"code","type":"cell","end":1505835918861,"id":"f633be","kernel":"python3"}
{"type":"cell","id":"22ebcb","pos":55,"input":"","cell_type":"code"}